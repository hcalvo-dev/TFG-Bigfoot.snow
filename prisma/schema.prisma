// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int       @id @default(autoincrement())
  nombre    String
  email     String    @unique
  password  String
  reservas  Reserva[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Instructor {
  id        Int      @id @default(autoincrement())
  nombre    String
  clases    Clase[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clase {
  id           Int        @id @default(autoincrement())
  fecha        DateTime
  duracion     Int // en minutos
  precio       Float
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId Int
  reservas     Reserva[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String
  productos Producto[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Producto {
  id            Int              @id @default(autoincrement())
  nombre        String
  descripcion   String?
  precioDia     Float
  categoria     Categoria        @relation(fields: [categoriaId], references: [id])
  categoriaId   Int
  reservas      ProductoReserva[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Reserva {
  id          Int              @id @default(autoincrement())
  fechaInicio DateTime
  fechaFin    DateTime
  usuario     Usuario          @relation(fields: [usuarioId], references: [id])
  usuarioId   Int
  clase       Clase?           @relation(fields: [claseId], references: [id])
  claseId     Int?
  productos   ProductoReserva[]  // Relación N:M real
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Tabla intermedia para la relación N:M entre Producto y Reserva
model ProductoReserva {
  reserva    Reserva  @relation(fields: [reservaId], references: [id])
  reservaId  Int

  producto   Producto @relation(fields: [productoId], references: [id])
  productoId Int

  cantidad   Int      @default(1) // cantidad del producto reservado

  @@id([reservaId, productoId]) // clave compuesta
}


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rol {
  id       Int       @id @default(autoincrement())
  nombre   String    @unique
  usuarios Usuario[]
}

model Usuario {
  id           Int          @id @default(autoincrement())
  nombre       String
  email        String       @unique
  password     String
  rol          Rol          @relation(fields: [rolId], references: [id])
  rolId        Int
  estadoCuenta Boolean      @default(true)
  reservas     Reserva[]
  instructor   Instructor?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Instructor {
  id             Int                        @id @default(autoincrement())
  especialidad   String
  fotoUrl        String
  activo         Boolean                    @default(true)
  usuario        Usuario                    @relation(fields: [userId], references: [id])
  userId         Int                        @unique
  nivelRel       Nivel                      @relation(fields: [nivelId], references: [id])
  nivelId        Int
  testimonio     String
  clases         Clase[]
  disponibilidad InstructorDisponibilidad[]
  montañas      Montaña[]                 @relation("InstructorMontaña")
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
}

model Nivel {
  id           Int          @id @default(autoincrement())
  nombre       String       @unique
  precio       Int
  instructores Instructor[]
}

model Montaña {
  id           Int          @id @default(autoincrement())
  nombre       String
  ubicacion    String
  altura       Int
  descripcion  String?
  lat          Float
  lon          Float
  rutas        Ruta[]
  instructores Instructor[] @relation("InstructorMontaña")
  climas       Clima[]
  tienda       Tienda[]
  reservas     Reserva[]
  clases       Clase[]
}

model Ruta {
  id         Int      @id @default(autoincrement())
  nombre     String
  dificultad String
  longitud   Float // en km
  montaña   Montaña @relation(fields: [montañaId], references: [id])
  montañaId Int
}

model Clima {
  id             Int      @id @default(autoincrement())
  fecha          DateTime
  temperaturaMax Float
  temperaturaMin Float
  descripcion    String
  icono          String
  montaña       Montaña @relation(fields: [montañaId], references: [id])
  montañaId     Int

  @@unique([fecha, montañaId])
}

model Clase {
  id           Int        @id @default(autoincrement())
  titulo       String
  descripcion  String
  nivel        String
  duracion     Int
  precio       Float
  tipo         String
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId Int
  reservas     Reserva[]
  montaña     Montaña   @relation(fields: [montanaId], references: [id])
  montanaId    Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model InstructorDisponibilidad {
  id           Int        @id @default(autoincrement())
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId Int
  fecha        DateTime
  horaInicio   DateTime
  horaFin      DateTime
  disponible   Boolean
}

model Reserva {
  id           Int               @id @default(autoincrement())
  fechaInicio  DateTime
  fechaFin     DateTime
  fechaReserva DateTime          @default(now())
  estado       String
  tokenCarrito String?
  metodoPago   String
  total        Float
  usuario      Usuario?          @relation(fields: [usuarioId], references: [id])
  usuarioId    Int?
  clase        Clase?            @relation(fields: [claseId], references: [id])
  claseId      Int?
  montaña     Montaña?         @relation(fields: [montanaId], references: [id])
  montanaId    Int
  productos    ProductoReserva[]
  pagado       Boolean           @default(false)
  expiresAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Producto {
  id             Int                      @id @default(autoincrement())
  nombre         String
  descripcion    String?
  precioDia      Float
  estado         String
  imagenUrl      String
  stockTotal     Int
  categorias     Categoria[]              @relation("ProductoCategorias")
  tienda         Tienda                   @relation(fields: [tiendaId], references: [id])
  tiendaId       Int
  ubicacion      String
  tallas         String[]
  medidas        String[]
  reservas       ProductoReserva[]
  disponibilidad ProductoDisponibilidad[]
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
}

model ProductoDisponibilidad {
  id                 Int      @id @default(autoincrement())
  producto           Producto @relation(fields: [productoId], references: [id])
  productoId         Int
  fecha              DateTime
  cantidadDisponible Int
}

model Categoria {
  id         Int         @id @default(autoincrement())
  nombre     String      @unique
  productos  Producto[]  @relation("ProductoCategorias")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Tienda {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  direccion String
  telefono  String
  montaña   Montaña    @relation(fields: [montanaId], references: [id])
  montanaId Int
  productos Producto[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ProductoReserva {
  reserva    Reserva  @relation(fields: [reservaId], references: [id])
  reservaId  Int
  producto   Producto @relation(fields: [productoId], references: [id])
  productoId Int
  cantidad   Int      @default(1)

  @@id([reservaId, productoId])
}

enum AplicaEn {
  PRODUCTOS
  CLASES
  AMBOS
}

model Descuento {
  id           Int      @id @default(autoincrement())
  codigo       String   @unique
  descripcion  String
  porcentaje   Int
  aplicaEn     AplicaEn
  fechaValidez DateTime
  activo       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
